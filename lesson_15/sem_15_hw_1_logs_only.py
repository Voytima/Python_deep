"""
üìå –í–æ–∑—å–º–∏—Ç–µ –ª—é–±—ã–µ 1-3 –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.
   –î–æ–±–∞–≤—å—Ç–µ –∫ –Ω–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
   –¢–∞–∫–∂–µ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
"""
from random import randint
from typing import Callable
import logging

FORMAT = '{levelname} - {asctime} - {msg}'
logging.basicConfig(filename="guesser.log", encoding='utf-8', level=logging.INFO, style='{', format=FORMAT)
logger = logging.getLogger(__name__)


def logs(tries, guess_number, user_num, result, num2):
    logger.info(f"Try {tries} out of {num2}, Value to guess: {guess_number}, Entered value: {user_num}, Result: {result}")


def incoming_num(tries=5) -> Callable[[], None]:
    def guess_num():
        result = "Undefined"
        guess_number = randint(1, 100)
        for i in range(1, tries + 1):
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–æ–º–µ—Ä {i}:")
            try:
                user_num = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:\n>>> "))
            except ValueError:
                logger.error("Entered not an int value. Aborted...")
                print("Not an int num")
                break
            if user_num == guess_number:
                print("–í—ã —É–≥–∞–¥–∞–ª–∏!")
                result = "You won!"
                logs(tries=i, guess_number=guess_number, user_num=user_num, result=result, num2=tries)
                break
            elif user_num < guess_number:
                print("–í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ")
                result = "User num is lesser"
            elif user_num > guess_number:
                print("–í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ")
                result = "User num is greater"
            logs(tries=i, guess_number=guess_number, user_num=user_num, result=result, num2=tries)
        else:
            result = "No more tries"
            logs(tries=None, guess_number=guess_number, user_num=user_num, result=result, num2=tries)

    return guess_num


game = incoming_num()
game()

