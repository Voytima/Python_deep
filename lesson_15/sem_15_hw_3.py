"""
üìå –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –ø—É—Ç—å –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ –ü–ö.
üìå –°–æ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–æ–≤ namedtuple.
üìå –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω–∏—Ç:
    ‚óã –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞,
    ‚óã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª,
    ‚óã —Ñ–ª–∞–≥ –∫–∞—Ç–∞–ª–æ–≥–∞,
    ‚óã –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.
üìå –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
"""
import argparse
import os
import pathlib
from pathlib import Path
from collections import namedtuple
import logging

logging.basicConfig(filename="tracker.log", encoding='utf-8', level=logging.INFO)
logger = logging.getLogger(__name__)


def collector(user_dir: pathlib.Path):
    Object = namedtuple('Object', 'ObjectName, Extension, Catalog_flag, Parent_dir')
    all_files = pathlib.Path(user_dir).glob('*')
    for file in all_files:
        if file.is_file():
            file_name = file.name.split('.')[0]
            file_extension = f".{file.name.split('.')[1]}" if str(file.name).count('.') == 1 else None
            catalog_flag = (os.stat(file).st_mode & 0o777)
            parent_dir = str(file.parent).split('\\')[-1]
            to_write = Object._make([file_name, file_extension, catalog_flag, parent_dir])
            logger.info(to_write)
        elif file.is_dir():
            file_name = file.name
            file_extension = None
            catalog_flag = (os.stat(file).st_mode & 0o777)
            parent_dir = str(file.parent).split('\\')[-1]
            to_write = Object._make([file_name, file_extension, catalog_flag, parent_dir])
            logger.info(to_write)


def parser():
    parser = argparse.ArgumentParser(description="–û–±—Ö–æ–¥ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    parser.add_argument('-p', '--path', default=Path(os.getcwd()))
    args = parser.parse_args()
    user_dir = Path(input("Enter path: "))
    path = user_dir if user_dir.is_dir() else args.path
    return collector(path)


if __name__ == '__main__':
    # name = Path(input("Enter path: "))
    # print(collector(name))
    parser()
